{"ast":null,"code":"var _jsxFileName = \"/Users/rcliang/Documents/GitHub/Classes/react-test/src/TodoList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // import './TodoList.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: []\n    };\n  }\n\n  componentDidMount() {\n    this.getTodos().then(tasks => {\n      this.setState({\n        tasks\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TodoForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoTable, {\n        tasks: this.state.tasks,\n        updateTodo: this.handleUpdateTodo.bind(this),\n        removeTodo: this.removeTodo.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n  getTodos() {\n    var requestOptions = {\n      method: 'GET'\n    };\n    return fetch('http://localhost:3000/api/todos?userId=1', requestOptions).then(response => response.json());\n  }\n\n  handleUpdateTodo(id, target) {\n    const status = target.checked ? 'finished' : 'unfinished';\n    this.updateTodo(id, {\n      status\n    }).then(todo => {\n      const tasks = this.state.tasks;\n      const index = tasks.findIndex(t => t.id == todo.id);\n      tasks.splice(index, 1, todo);\n      this.setState({\n        tasks\n      });\n    });\n  }\n\n  updateTodo(id, {\n    status\n  }) {\n    var myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      status,\n      userId: 1\n    });\n    var requestOptions = {\n      method: 'PUT',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    return fetch('http://localhost:3000/api/todos/' + id, requestOptions).then(response => response.json());\n  }\n\n  removeTodo(event) {\n    console.log('>>', event.target);\n  }\n\n}\n\nclass TodoTable extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"allTasks\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Is Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), this.props.tasks.map(task => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: task.status == 'finished',\n                onChange: event => this.props.updateTodo(task.id, event.target)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.taskName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: task.taskDescription\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.removeTodo,\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nTodoTable.propTypes = {\n  tasks: PropTypes.array,\n  updateTodo: PropTypes.func,\n  removeTodo: PropTypes.func\n};\n\nclass TodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskName: '',\n      taskDescription: '',\n      tasks: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    console.log(target);\n    this.setState({\n      [target.name]: target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.addTodo({\n      taskName: this.state.taskName,\n      taskDescription: this.state.taskDescription\n    }).then(todo => {\n      const tasks = this.state.tasks;\n      tasks.push(todo);\n      this.setState({\n        tasks\n      });\n    });\n  }\n\n  addTodo({\n    taskName,\n    taskDescription\n  }) {\n    var myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      taskName,\n      taskDescription,\n      userId: 1\n    });\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    return fetch('http://localhost:3000/api/todos', requestOptions).then(response => response.json());\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Todos \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"taskName\",\n        type: \"textarea\",\n        value: this.state.taskName,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"taskDescription\",\n        type: \"textarea\",\n        value: this.state.taskDescription,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        onClick: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/rcliang/Documents/GitHub/Classes/react-test/src/TodoList.js"],"names":["React","PropTypes","TodoList","Component","constructor","props","state","tasks","componentDidMount","getTodos","then","setState","render","handleUpdateTodo","bind","removeTodo","requestOptions","method","fetch","response","json","id","target","status","checked","updateTodo","todo","index","findIndex","t","splice","myHeaders","Headers","append","raw","JSON","stringify","userId","headers","body","redirect","event","console","log","TodoTable","map","task","taskName","taskDescription","propTypes","array","func","TodoForm","handleSubmit","handleInputChange","name","value","preventDefault","addTodo","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import './TodoList.css'\n\nexport default class TodoList extends React.Component {\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      tasks: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getTodos()\n      .then(tasks=> {\n        this.setState({tasks});\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <TodoForm />\n        <TodoTable tasks={this.state.tasks} updateTodo={this.handleUpdateTodo.bind(this)} removeTodo = {this.removeTodo.bind(this)} />\n      </div>\n    );\n  }\n\n  getTodos() {\n    var requestOptions = {\n      method: 'GET',\n    }; \n\n    return fetch('http://localhost:3000/api/todos?userId=1', requestOptions)\n      .then(response => response.json());\n  }\n\n  handleUpdateTodo(id, target) {\n    const status = target.checked ? 'finished' : 'unfinished';\n    this.updateTodo(id, {status})\n      .then(todo => {\n        const tasks = this.state.tasks;\n        const index = tasks.findIndex(t => t.id == todo.id);\n        tasks.splice(index, 1, todo);\n        this.setState({tasks});\n      });\n  }\n\n  updateTodo(id, {status}) {\n    var myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    \n    var raw = JSON.stringify({\n      status,\n      userId: 1\n    });\n    \n    var requestOptions = {\n      method: 'PUT',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    \n    return fetch('http://localhost:3000/api/todos/' + id, requestOptions)\n      .then(response => response.json());\n  }\n\n  removeTodo(event) {\n    console.log('>>', event.target);\n  }\n}\n\nclass TodoTable extends React.Component {\n\n  render() {\n    return (\n      <div id='allTasks'>\n        <table>\n          <thead>\n            <tr>\n              <td>Is Done</td>\n              <td>Name</td>\n              <td>Description</td>\n              <td>Options</td>\n            </tr>\n          </thead>\n          {this.props.tasks.map(task => {\n            return (\n              <tr key={task.id}>\n                <td>\n                  <input \n                    type=\"checkbox\"\n                    checked={task.status == 'finished'}\n                    onChange={(event) => this.props.updateTodo(task.id, event.target)}>\n                  </input></td>\n                <td>{task.taskName}</td>\n                <td>{task.taskDescription}</td>\n                <td><button onClick={this.removeTodo}>X</button></td>\n              </tr>\n            );\n          })}\n        </table>\n      </div>\n    );\n  }\n\n}\n\nTodoTable.propTypes = {\n  tasks: PropTypes.array,\n  updateTodo: PropTypes.func,\n  removeTodo: PropTypes.func,\n};\n\nclass TodoForm extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      taskName: '',\n      taskDescription: '',\n      tasks: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n \n  handleInputChange(event) {\n    const target = event.target;\n    console.log(target);\n    this.setState({\n      [target.name]: target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.addTodo({\n      taskName: this.state.taskName,\n      taskDescription: this.state.taskDescription,\n    })\n      .then(todo => {\n        const tasks = this.state.tasks;\n        tasks.push(todo);\n        this.setState({tasks});\n      });\n  }\n\n  addTodo({taskName, taskDescription}) {\n    var myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    \n    var raw = JSON.stringify({\n      taskName,\n      taskDescription,\n      userId: 1\n    });\n    \n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    \n    return fetch('http://localhost:3000/api/todos', requestOptions)\n      .then(response => response.json());\n  }\n\n  render() {\n    return (\n      <form>\n        <h1> Todos </h1>\n        <input \n          name='taskName'\n          type='textarea'\n          value={this.state.taskName} \n          onChange={this.handleInputChange} \n        />\n        <input \n          name='taskDescription'\n          type='textarea'\n          value={this.state.taskDescription} \n          onChange={this.handleInputChange} \n        />\n        <input type='submit' value='Submit' onClick={this.handleSubmit} />\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}